# -*- coding: utf-8 -*-
"""USA Housing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TCMcRsNSw1iAxGd5zcoifRheSjL2WLSq
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets
import seaborn as sns

x = np.array([50,53,54,55,56,59,62,65,67,71,72,74,75,76,79,80,82,85,87,90,93,94,95,97,100])
y = np.array([122,118,128,121,125,136,144,142,149,161,167,168,162,171,175,182,180,183,188,200,194,206,207,210,219])

x_mean = np.mean(x)
y_mean = np.mean(y)
n = 24
a = (n * np.sum( x * y)) - (np.sum(x) * np.sum(y))
b = (n * np.sum(x*x)) - (np.sum(x)* np.sum(x))
m = a / b
print("The slope is ", m)

c = y_mean - (m * x_mean)
print("The intercept is ", c)

plt.plot(x,y)
plt.show()

y_pred = []
for i in range(len(x)):
    z = (m * x[i])+ c
    y_pred.append(z)
print(y_pred)

plt.plot(x,y_pred)
plt.show()

plt.scatter(x,y_pred)
plt.show()



plt.scatter(x,y_pred)
plt.scatter(x,y)
plt.plot(x,y_pred)
plt.show()

data = pd.read_csv("USA_Housing.csv")
data

df = data.drop(columns = 'Address')
df

df.describe()

df.info()

df.isnull().sum()

plt.figure(figsize=(10,10))
sns.boxplot(df)

price = df.drop(columns = 'Price')
price

price.clip(price.quantile(0.1), price.quantile(0.9),axis = 1)

plt.figure(figsize=(10,10))
sns.boxplot(price)

from sklearn.preprocessing import StandardScaler, MinMaxScaler

scaler = MinMaxScaler()
scaler_value = scaler.fit_transform(price[['Avg. Area Income']])
scaler_value
price['Avg. Area Income'] = scaler_value
price.head(10)

scaler = MinMaxScaler()
scaler_value = scaler.fit_transform(price[['Area Population']])
scaler_value
price['Area Population'] = scaler_value
price.head(10)

plt.figure(figsize=(10,10))
sns.boxplot(price)

# from sklearn.preprocessing import LabelEncoder

# l = labelEncoder()

# df_mean = np.mean(df)

# df = np.reshape(-1, 1)
# df

from sklearn.model_selection import train_test_split

price.columns

x = price[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
       'Avg. Area Number of Bedrooms', 'Area Population']]
x_train, x_test, y_train, y_test = train_test_split(x, df['Price'], test_size = 0.33, random_state = 42)

from sklearn.linear_model import LinearRegression, LogisticRegression

l = LinearRegression()

# # If x_train has more samples than y_train
# x_train = x_train[:len(y_train)]

# # If y_train has more samples than x_train
# y_train = y_train[:len(x_train)]

# # Fit the model
# l.fit(x_train, y_train)

# x_train = x_train.to_numpy()

# x_train = x_train.reshape(-1,1)

l.fit(x_train, y_train)

# x_test = x_test.to_numpy()

# x_test = x_test.reshape(-1,1)

y_pred = l.predict(x_test)

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

r2_score(y_test, y_pred)

mean_squared_error(y_test, y_pred)

mean_absolute_error(y_test, y_pred)

